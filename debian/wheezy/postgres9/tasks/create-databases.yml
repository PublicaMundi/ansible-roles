---

  #
  # Create databases
  # 
 
  - shell: psql -A -F ',' -R '$' -t -c '\l'| awk -F ',' -v 'RS=$' -- '{print $1}'
    sudo: yes
    sudo_user: postgres
    register: psql_l_result
  
  - set_fact:
      existing_databases: '{{psql_l_result.stdout_lines}}'
  - debug: var=existing_databases
 
  - name: Create databases
    command: psql -c 'CREATE DATABASE {{item.name}} OWNER "{{item.owner}}" TABLESPACE {{item.tablespace| default("DEFAULT")}}' 
    sudo: yes
    sudo_user: postgres
    with_items: postgres.databases
    when: item.name not in existing_databases

  - name: Load extensions into databases
    command: psql -c 'CREATE EXTENSION IF NOT EXISTS {{item.1}}' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist: 
    - postgres.databases
    - extensions 
    when: item.0.name not in existing_databases

  # Todo: Is there a better way to do this? 
  # The previous CREATE-EXTENSION statements leaves postgis-related tables unusable 
  # for the database owner.
  - name: Fix postgis permissions for owner
    command: psql -c 'ALTER TABLE {{item.1}} OWNER TO "{{item.0.owner}}"' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_nested:
    - postgres.databases
    - ['spatial_ref_sys', 'geometry_columns']
    when: '{{"postgis" in item.0.extensions}}'

  #
  # Define default privileges
  # Note: This must be done before creating any objects inside the databases!
  #

  - name: Grant default read priviledges to entire schemata
    command: psql -c 'ALTER DEFAULT PRIVILEGES FOR ROLE "{{item.0.owner}}" IN SCHEMA public GRANT SELECT ON TABLES TO "{{item.1}}"' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist:
    - postgres.databases
    - readers

  - name: Grant default read/write priviledges to entire schemata
    command: psql -c 'ALTER DEFAULT PRIVILEGES FOR ROLE "{{item.0.owner}}" IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE, TRUNCATE ON TABLES TO "{{item.1}}"' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist:
    - postgres.databases
    - writers

  #
  # Initialize databases running custom (DDL?) SQL scripts 
  #

  - name: Copy init scripts to target machine
    copy: src={{item.1}} dest=/tmp/{{(item.0.name ~ '$' ~ item.1)| md5}}.sql owner=postgres
    with_subelements_if_exist: 
    - postgres.databases
    - initialize 

  - name: Source init scripts into target database
    command: psql -a -1 -f /tmp/{{(item.0.name ~ '$' ~ item.1)| md5}}.sql {{item.0.name}}
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist: 
    - postgres.databases
    - initialize
