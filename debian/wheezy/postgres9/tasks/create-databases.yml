---

  # Create databases
  
  - name: Create databases
    command: "psql 
      -c 'CREATE DATABASE {{item.name}} OWNER \"{{item.owner}}\" TABLESPACE {{item.tablespace| default(\"DEFAULT\")}}'" 
    sudo: yes
    sudo_user: postgres
    with_items: postgres.databases
    when: item.name not in existing_databases

  - name: Load extensions into databases
    command: psql -c 'CREATE EXTENSION IF NOT EXISTS {{item.1}}' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist: 
    - postgres.databases
    - extensions 
    when: item.0.name not in existing_databases

  # Todo: Is there a better way to do this? 
  # The previous CREATE-EXTENSION statements leaves postgis-related tables unusable 
  # for the database owner.
  - name: Fix postgis permissions for owner
    command: psql -c 'ALTER TABLE {{item.1}} OWNER TO "{{item.0.owner}}"' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_nested:
    - postgres.databases
    - 
      - 'spatial_ref_sys'
      - 'geometry_columns'
      - 'geography_columns'
      - 'raster_columns'
      - 'raster_overviews'
    when: '{{"postgis" in item.0.extensions}}'

  # Define default privileges
  # Note: This must be done before creating any objects inside the databases!

  - name: Grant default read priviledges to entire schemata
    command: "psql 
      -c 'ALTER DEFAULT PRIVILEGES FOR ROLE \"{{item.0.owner}}\" IN SCHEMA public GRANT SELECT ON TABLES TO \"{{item.1}}\"'
      -d '{{item.0.name}}'"
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist:
    - postgres.databases
    - readers

  - name: Grant default read/write priviledges to entire schemata
    command: "psql 
      -c 'ALTER DEFAULT PRIVILEGES FOR ROLE \"{{item.0.owner}}\" IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE, TRUNCATE ON TABLES TO \"{{item.1}}\"'
      -d '{{item.0.name}}'"
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist:
    - postgres.databases
    - writers

  # Initialize databases running user-provided (DDL?) SQL scripts 
  # Note: The detailed results can be found at /var/tmp.

  - name: Copy SQL init scripts to target host
    copy: 
      src: "{{item.1.local_path}}"
      dest: "/var/tmp/{{item.0.name}}-{{item.1.local_path| md5}}.sql"
      owner: postgres
      group: postgres
    with_subelements_if_exist: 
    - postgres.databases
    - initialize 
  
  - name: Feed SQL init scripts into target database
    shell: "psql 
      -a {{'-1' if item.1.single_transaction else ''}}
      -f /var/tmp/{{item.0.name}}-{{item.1.local_path| md5}}.sql
      -L /var/tmp/{{item.0.name}}.out.log
      -d {{item.0.name}} 
      1>/var/tmp/{{item.0.name}}-{{item.1.local_path| md5}}.out.log
      2>/var/tmp/{{item.0.name}}-{{item.1.local_path| md5}}.err.log"
    register: psql_i_result
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist: 
    - postgres.databases
    - initialize
   
  # Todo: Check (and warn) if errors are reported at *.err.log 

