#!/bin/bash

### BEGIN INIT INFO
# Provides: celeryd
# Required-Start: $remote_fs $network
# Required-Stop: $remote_fs $network
# Should-Start: redis-server
# Should-Stop: redis-server
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start celery master daemon
### END INIT INFO

NAME=celeryd

#
# Read configuration, activate virtual environment
#

. /etc/default/celeryd

[ ! -d "${WORKING_DIR}" ] && WORKING_DIR=/tmp

[ -z "${LOGFILE}" ] && LOGFILE=/tmp/celeryd.log
[ -z "${PIDFILE}" ] && PIDFILE=/tmp/celeryd.pid

[ -z "${STOP_TIMEOUT}" ] && STOP_TIMEOUT=20

if [ -z "${RUN_AS_USER}" ]; then
    RUN_AS_USER=root
else
    uid=$(id -u ${RUN_AS_USER} 2>/dev/null)
    [ -z "$uid" ] && exit 1
fi

if [ -z "${RUN_AS_GROUP}" ]; then 
    RUN_AS_GROUP=daemon
else
    gid=$(id -g ${RUN_AS_GROUP} 2>/dev/null)
    [ -z "$gid" ] && exit 1
fi

[ -z "${CELERY_CONFIG}" ] && CELERY_CONFIG=celeryconfig

if [ -d "${PYENV}" ]; then
    . ${PYENV}/bin/activate
fi

celeryd=$(which celeryd)
[ -x "$celeryd" ] || exit 1

cd ${WORKING_DIR}

#
# Handle subcommand 
#

. /lib/lsb/init-functions

case $1 in
    start)
        # Check if pidfile exists
        if [ -e ${PIDFILE} ]; then
            # Check the actual status of process
            status_of_proc -p ${PIDFILE} ${celeryd} ${NAME} && status="0" || status="$?"
            # If the status is successfull, no need to start again.
            [ ${status} = "0" ] && exit 0
        fi
        # Start the daemon.
        log_daemon_msg "${NAME}" "Starting with ${CELERY_CONCURRENCY} worker processes"
        # Start the daemon with the help of start-stop-daemon
        start-stop-daemon -S --background --oknodo --pidfile ${PIDFILE}\
          --chuid ${RUN_AS_USER} --chdir ${WORKING_DIR} --startas ${celeryd} -- \
             --config=${CELERY_CONFIG} \
             --concurrency ${CELERY_CONCURRENCY} \
             --pidfile=${PIDFILE} \
             --logfile ${LOGFILE} \
             --loglevel info
        if [ "$?" == "0" ]; then
            log_end_msg 0
        else
            log_end_msg 1
        fi
        ;;
    stop)
        if [ -e ${PIDFILE} ]; then
            status_of_proc -p ${PIDFILE} ${celeryd} ${NAME} && status="0" || status="$?"
            if [ "$status" = "0" ]; then
                log_daemon_msg "${NAME}" "Stopping group of ${CELERY_CONCURRENCY} worker processes"
                kill -TERM $(cat ${PIDFILE})
                if [ "$?" == "0" ]; then
                    # Sent TERM signal 
                    log_end_msg 0 
                    # Now wait until pidfile disappears
                    log_daemon_msg "${NAME}" "Waiting for active tasks to complete"
                    inotifywait -qq -t${STOP_TIMEOUT} -e delete_self ${PIDFILE}
                    if [ "$?" == "2" ]; then
                        # Timeout; Maybe increase timeout for inotify event 
                        log_end_msg 1
                    else
                        # The pidfile was deleted
                        log_end_msg 0
                    fi
                else
                    # Failed to send TERM signal to master process
                    log_end_msg 1
                fi
            fi
        else
            log_daemon_msg "${NAME} is not running"
            log_end_msg 0
        fi
        ;;
    restart)
        $0 stop && sleep 3 && $0 start
        ;;
    status)
        # Check the status of the process.
        if [ -e ${PIDFILE} ]; then
            status_of_proc -p ${PIDFILE} ${celeryd} ${NAME} && exit 0 || exit $?
        else
            log_daemon_msg "${NAME} is not running" "no pidfile"
            log_end_msg 0
        fi
        ;;
    reload)
        # Not supported
        exit 1
        ;;
    *)
        # Invalid argument, print the usage message.
        echo "Usage: $0 {start|stop|restart|reload|status}"
        exit 2
        ;;
esac


